import { useCallback, useEffect, useMemo, useState } from "react"
import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios"

interface IUseFetch<T = any> {
  baseUrl?: string
  endpoint: string
  method: 'GET' | 'POST' | 'PUT' | 'DELETE'
  data?: any
  headers?: Record<string, string>
  withCredentials?: boolean
}

interface IApiResponse<T = any> {
  data: T | null
  error: any
  loading: boolean
  execute: (data?: any, config?: Omit<IUseFetch<T>, 'endpoint' | 'method'>) => Promise<void>
}

const useApiCall = <T = any>({
  baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000',
  endpoint,
  method = 'GET',
  data: initialData,
  headers: initialHeaders = {},
  withCredentials = true
}: IUseFetch<T>): IApiResponse<T> => {
  const [data, setData] = useState<T | null>(null)
  const [error, setError] = useState<any>(null)
  const [loading, setLoading] = useState<boolean>(false)
  const [token, setToken] = useState<string | null>(localStorage.getItem('token'))
  const [refreshToken, setRefreshToken] = useState<string | null>(localStorage.getItem('refreshToken'))

  // Create axios instance with base config
  const axiosInstance = useMemo(() => {
    const instance = axios.create({
      baseURL: baseUrl,
      headers: {
        'Content-Type': 'application/json',
        ...initialHeaders
      },
      withCredentials
    })

    // Request interceptor for auth token
    instance.interceptors.request.use(
      (config) => {
        const token = localStorage.getItem('token')
        if (token) {
          config.headers.Authorization = `Bearer ${token}`
        }
        return config
      },
      (error) => {
        return Promise.reject(error)
      }
    )

    // Response interceptor for token refresh
    instance.interceptors.response.use(
      (response) => response,
      async (error) => {
        const originalRequest = error.config
        
        // If error is not 401 or it's a retry request, reject
        if (error.response?.status !== 401 || originalRequest._retry) {
          return Promise.reject(error)
        }

        originalRequest._retry = true

        try {
          const response = await axios.post(`${baseUrl}/auth/refresh-token`, {
            refreshToken: localStorage.getItem('refreshToken')
          })

          const { token, refreshToken: newRefreshToken } = response.data
          
          // Store new tokens
          localStorage.setItem('token', token)
          if (newRefreshToken) {
            localStorage.setItem('refreshToken', newRefreshToken)
          }
          
          // Update token in headers and retry original request
          originalRequest.headers.Authorization = `Bearer ${token}`
          return axiosInstance(originalRequest)
        } catch (error) {
          // If refresh token fails, clear auth and redirect to login
          localStorage.removeItem('token')
          localStorage.removeItem('refreshToken')
          window.location.href = '/login'
          return Promise.reject(error)
        }
      }
    )

    return instance
  }, [baseUrl, initialHeaders, withCredentials])

  const execute = useCallback(async (requestData = initialData, config = {}) => {
    setLoading(true)
    setError(null)

    try {
      let response: AxiosResponse<T>
      
      switch (method) {
        case 'GET':
          response = await axiosInstance.get<T>(endpoint, { ...config, params: requestData })
          break
        case 'POST':
          response = await axiosInstance.post<T>(endpoint, requestData, config)
          break
        case 'PUT':
          response = await axiosInstance.put<T>(endpoint, requestData, config)
          break
        case 'DELETE':
          response = await axiosInstance.delete<T>(endpoint, { ...config, data: requestData })
          break
        default:
          throw new Error(`Unsupported method: ${method}`)
      }

      setData(response.data)
      return response.data
    } catch (error) {
      const axiosError = error as AxiosError
      setError(axiosError.response?.data || axiosError.message)
      throw error
    } finally {
      setLoading(false)
    }
  }, [endpoint, method, initialData, axiosInstance])

  return { data, error, loading, execute }
}

export default useApiCall